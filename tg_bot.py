import sys
import asyncio
import os
import logging
import aiohttp  
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import json

load_dotenv()

bot = Bot(os.environ.get('TOKEN'))  
FASTAPI_URL = "<URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞>" 

dp = Dispatcher(parse_mode=ParseMode.MARKDOWN)

@dp.message(Command("start"))
async def start(message: types.Message):
    start_message_1 = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã <b>FlashTeam</b>, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –¥–æ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ <b>T-lite-instruct-0.1</b>. "
        "–Ø –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
    )
    start_message_2 = (
        "‚ö†Ô∏è –í–ê–ñ–ù–û:‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –º–æ–¥–µ–ª–∏. –ü—Ä–∏–º–µ—Ä:\n\n"
        "{\n"
        "  \"query\": \"You are travel assistents.\\nYour decisions must always be made independently without seeking user assistance. "
        "Play to your strengths as an LLM and pursue simple strategies with no legal complications.\\n\\nGOALS:\\n\\n"
        "1. –ù–∞–π–¥–∏ –æ—Ç–µ–ª—å –≤ –≥–æ—Ä–æ–¥–µ –ê–Ω—Ç–∞–ª–∏—è –Ω–∞ 10.09.2024\\n\\n"
        "Constraints:\\n1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files.\\n"
        "2. If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember.\\n"
        "3. No user assistance\\n4. Exclusively use the commands listed in double quotes e.g. \"command name\"\\n"
        "5. Use subprocesses for commands that will not terminate within a few minutes\\n\\nCommands:\\n"
        "1. Google Search: \"google\", args: \"input\": \"<–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>\"\\n"
        "2. Browse Website: \"browse_website\", args: \"url\": \"<url>\", \"question\": \"<—á—Ç–æ_–≤—ã_—Ö–æ—Ç–∏—Ç–µ_–Ω–∞–π—Ç–∏_–Ω–∞_—Å–∞–π—Ç–µ>\"\\n"
        "3. Start GPT Agent: \"start_agent\", args: \"name\": \"<name>\", \"task\": \"<–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>\", \"prompt\": \"<–ø—Ä–æ–º–ø—Ç>\"\\n"
        "4. Message GPT Agent: \"message_agent\", args: \"key\": \"<–∫–ª—é—á>\", \"message\": \"<—Å–æ–æ–±—â–µ–Ω–∏–µ>\"\\n"
        "5. List GPT Agents: \"list_agents\"\\n6. Delete GPT Agent: \"delete_agent\", args: \"key\": \"<–∫–ª—é—á>\"\\n"
        "7. Clone Repository: \"clone_repository\", args: \"repository_url\": \"<url>\", \"clone_path\": \"<–ø—É—Ç—å_–¥–ª—è_–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è>\"\\n"
        "8. Write to File: \"write_to_file\", args: \"file\": \"<—Ñ–∞–π–ª>\", \"text\": \"<—Ç–µ–∫—Å—Ç>\"\\n"
        "9. Read File: \"read_file\", args: \"file\": \"<—Ñ–∞–π–ª>\"\\n10. Append to File: \"append_to_file\", args: \"file\": \"<—Ñ–∞–π–ª>\", \"text\": \"<—Ç–µ–∫—Å—Ç>\"\\n"
        "11. Delete File: \"delete_file\", args: \"file\": \"<—Ñ–∞–π–ª>\"\\n12. Search Files: \"search_files\", args: \"directory\": \"<–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è>\"\\n"
        "13. Search Flights: \"search_flights\", args: \"from\": \"<–≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞>\", \"to\": \"<–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è>\", \"date\": \"<–¥–∞—Ç–∞>\"\\n"
        "14. Search Hotels: \"search_hotels\", args: \"city\": \"<–≥–æ—Ä–æ–¥>\", \"checkin\": \"<–¥–∞—Ç–∞>\", \"checkout\": \"<–¥–∞—Ç–∞>\"\\n"
        "15. Book Hotel: \"book_hotel\", args: \"hotel\": \"<–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è>\", \"dates\": \"<–¥–∞—Ç—ã>\"\\n16. Track Order: \"track_order\", args: \"order_id\": \"<–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞>\"\\n"
        "17. Request Missing Info: \"request_details\", args: \"missing_info\": \"<–Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è>\"\\n"
        "18. Recommend Products: \"recommend_products\", args: \"category\": \"<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\", \"budget\": \"<–±—é–¥–∂–µ—Ç>\"\\n"
        "19. Search Discounts: \"search_discounts\", args: \"product\": \"<–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>\"\\n20. Do Nothing: \"do_nothing\"\\n"
        "21. Task Complete (Shutdown): \"task_complete\", args: \"reason\": \"<–ø—Ä–∏—á–∏–Ω–∞>\"\\n\\n"
        "Resources:\\n1. Internet access for searches and information gathering.\\n2. Long Term memory management.\\n3. GPT-3.5 powered Agents for delegation of simple tasks.\\n4. File output.\\n\\n"
        "Performance Evaluation:\\n1. Continuously review and analyze your actions to ensure you are performing to the best of your abilities.\\n"
        "2. Constructively self-criticize your big-picture behavior constantly.\\n"
        "3. Reflect on past decisions and strategies to refine your approach.\\n"
        "4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.\\n\\n"
        "Response Format:\\n{\n"
        "    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n"
        "        \"criticism\": \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say to user\"\n    },\n"
        "    \"command\": {\n        \"name\": \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}\n"
        "Ensure the response can be parsed by Python json.loads\"\n}"
    )

    await message.answer(start_message_1, parse_mode=ParseMode.HTML)
    await message.answer(start_message_2)

@dp.message(F.text)
async def handle_message(message: types.Message):
    user_message = message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ FastAPI (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–æ–ª–µ "query")
    async with aiohttp.ClientSession() as session:
        async with session.post(
                FASTAPI_URL,
                json={"query": user_message}  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FastAPI –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        ) as response:
            if response.status == 200:
                # –ü–æ–ª—É—á–∞–µ–º JSON-–æ—Ç–≤–µ—Ç –æ—Ç FastAPI
                result = await response.json()

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                response_text = json.dumps(result, ensure_ascii=False, indent=2)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –µ—Å—Ç—å
                await message.reply(response_text)
            else:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

async def main():
    await dp.start_polling(bot, parse_mode=ParseMode.HTML)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())

